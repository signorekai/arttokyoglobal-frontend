---
import Layout from "../../layouts/Layout.astro";
import ProjectStatus from "../../components/ProjectStatus.astro";
import Dropdown from "../../components/Dropdown.astro";
import Card from "../../components/ClientCard.astro";
import { fetchFromAPI } from "../../library/helpers";

import tokens from "../../data/tokens";
const { collectionSlug } = Astro.params;

const { data } = await fetchFromAPI("/collections", {
  filters: {
    slug: collectionSlug,
  },
  populate: ["artist", "tokens", "coverImg", "artist.profilePhoto"],
  fields: ["title", "slug", "status", "totalTokens", "description"],
});
const collection = data[0];
collection.tokens = tokens;

export async function getStaticPaths() {
  const { data: collections } = await fetchFromAPI("/collections", {
    fields: ["slug"],
  });

  const collectionSlugs = collections.map((collection) => ({
    params: { collectionSlug: collection.slug },
  }));
  return collectionSlugs;
}
---

<Layout title={collection.title}>
  <div
    class="container container-grid mt-4 md:mt-12 lg:mt-16 items-center fade-up"
    x-data="fadeUp"
    x-bind="fadeUp"
  >
    <div class="col-start-2 col-span-6 lg:col-end-7">
      <img
        class="aspect-square w-full"
        alt="collection.title"
        src={collection.coverImg.medium
          ? collection.coverImg.medium.url
          : collection.coverImg.url}
      />
    </div>
    <div
      class="mt-6 lg:mt-0 col-start-2 col-end-8 lg:col-start-7 lg:col-end-12 flex flex-col items-end text-right justify-center"
    >
      <ProjectStatus status={collection.status} />
      <a
        href={`/collections/${collection.slug}`}
        class="text-right w-full lg:max-w-[75%] mt-6"
      >
        <h1>{collection.title}</h1>
      </a>
      <div
        class="flex flex-row gap-y-0.5 items-center md:justify-end mt-1 mb-2 group"
      >
        <div>
          <h4 class="block md:pl-5 pt-1 md:pt-0">
            By <a href={`/artists/${collection.artist.slug}`}
              >{collection.artist.name}
            </a>
          </h4>
          <h4 class="block md:pl-5 font-normal">
            <strong>{collection.tokens.length}</strong>
            of <strong>{collection.totalTokens}</strong> minted
          </h4>
        </div>
        <a
          href={`/artists/${collection.artist.slug}`}
          class="block overflow-hidden ml-3 rounded-xl"
        >
          <div
            class="aspect-square h-10 grayscale group-hover:grayscale-0 group-hover:scale-110 transition-all bg-cover bg-center"
            style={`background-image: url(${collection.artist.profilePhoto.formats.thumbnail.url})`}
          >
          </div>
        </a>
      </div>
      <div
        class="collection-description md:ml-10"
        set:html={collection.description}
      >
      </div>
    </div>
  </div>
  <section
    x-data="fadeUp"
    x-bind="fadeUp"
    class="relative m-0 md:mt-4 lg:mt-12 p-4 lg:p-0 fade-up"
  >
    <div class="container bg-peach rounded-4xl px-6 py-4 md:px-11 md:py-8">
      <div class="dropdown-wrapper z-40">
        <div class="flex flex-col lg:flex-row items-start">
          <Dropdown
            className="block"
            label="Sort By"
            id="sortBy"
            selects={[
              { label: "A-Z", sorting: [["title"], ["asc"]] },
              { label: "Z-A", sorting: [["title"], ["desc"]] },
            ]}
          />
        </div>
        <h3 class="pt-2">Tokens</h3>
      </div>
      <div class="content-wrapper">
        <div
          x-data={`filterables({
          id: "allCollections",
          listenTo: ["sortBy"],
          data: ${JSON.stringify(collection.tokens)},
        })`}
        >
          <div
            class="transition-opacity grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 mt-8 lg:gap-y-4"
            x-ref="container"
            x-bind="container"
          >
            <template x-for="token in filtered" :key="token.title">
              <div class="carousel-item w-full">
                <Card
                  link={`/collections/${collection.slug}/tokens/\${token.slug}`}
                  backgroundImage="${token.src}"
                  aspectRatio="${token.width} / ${token.height}"
                />
              </div>
            </template>
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  import Alpine from "alpinejs";
  import intersect from "@alpinejs/intersect";

  Alpine.plugin(intersect);
</script>
