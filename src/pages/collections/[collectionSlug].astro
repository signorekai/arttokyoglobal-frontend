---
import Layout from "../../layouts/Layout.astro";
import ProjectStatus from "../../components/ProjectStatus.astro";
import Dropdown from "../../components/Dropdown.astro";
import Card from "../../components/ClientCard.astro";
import { fetchFromAPI, getLargestPossibleImage } from "../../library/helpers";
import ethLogo from "../../images/eth-logo.png";

import { ethereumTestnet as ethereumConfig } from "../../library/network-config";

import MintPrice from "../../components/MintPrice.client.astro";
import MintWidget from "../../components/MintWidget.client.astro";

import sortBy from "lodash/sortBy";
const { collectionSlug } = Astro.params;

const { data } = await fetchFromAPI("/collections", {
  sort: ["tokens.tokenId"],
  filters: {
    slug: collectionSlug,
  },
  populate: [
    "artist",
    "tokens",
    "tokens.image",
    "coverImg",
    "artist.profilePhoto",
  ],
  fields: [
    "CID",
    "ABI",
    "title",
    "slug",
    "status",
    "totalTokens",
    "description",
    "dynamicStart",
    "startDate",
    "mintPrice",
    "totalTokens",
    "totalSupply",
    "contractAddress",
    "whitelistMintEnabled",
    "whitelistedAddresses",
  ],
});
let collection = data[0];

const tokens = [];
const sortedTokens = sortBy(collection.tokens, [
  (token) => Number(token.tokenId),
]);

for (var x = 0; x < collection.totalSupply; x++) {
  tokens.push(sortedTokens[x]);
}

collection.tokens = tokens;

export async function getStaticPaths() {
  const { data: collections } = await fetchFromAPI("/collections", {
    fields: ["slug"],
  });

  const collectionSlugs = collections.map((collection) => ({
    params: { collectionSlug: collection.slug },
  }));
  return collectionSlugs;
}
---

<Layout title={collection.title}>
  <h4
    class="container mt-4 md:mt-8 px-4 opacity-60 hover:opacity-100 transition-opacity"
  >
    <a href="/collections"
      ><i class="fas fa-caret-square-left"></i> Back to Collections</a
    >
  </h4>
  <div
    class="container container-grid mt-4 items-center fade-up"
    x-data="fadeUp"
    x-bind="fadeUp"
  >
    <div class="col-start-1 col-span-6 lg:col-end-6 lg:pl-4 lg:pt-2 lg:pb-2">
      <div
        class="aspect-square bg-cover bg-center w-full h-auto"
        style={`background-image: url(${getLargestPossibleImage(
          collection.coverImg,
          "large"
        )})`}
      >
      </div>
    </div>
    <div
      class="mt-6 lg:mt-0 col-start-2 col-end-8 lg:col-start-6 lg:col-end-13 lg:pr-4 flex flex-col items-end text-right justify-center"
    >
      <ProjectStatus status={collection.status} />
      <h1 class="text-right w-full lg:max-w-[75%] mt-6">{collection.title}</h1>
      <div
        class="flex flex-row gap-y-0.5 items-center md:justify-end mt-1 mb-2 group"
      >
        <div>
          <h4 class="block md:pl-5 pt-1 md:pt-0">
            By <a href={`/artists/${collection.artist.slug}`}
              >{collection.artist.name}
            </a>
          </h4>
          <h4 class="block md:pl-5 font-normal">
            <strong>{collection.tokens.length}</strong>
            of <strong>{collection.totalTokens}</strong> minted
          </h4>
        </div>
        <a
          href={`/artists/${collection.artist.slug}`}
          class="block overflow-hidden ml-3 rounded-xl"
        >
          <div
            class="aspect-square h-10 grayscale group-hover:grayscale-0 group-hover:scale-110 transition-all bg-cover bg-center"
            style={`background-image: url(${getLargestPossibleImage(
              collection.artist.profilePhoto,
              "thumbnail"
            )})`}
          >
          </div>
        </a>
      </div>
      <div
        class="collection-description md:ml-10"
        set:html={collection.description}
      >
      </div>
      <div class="flex flex-row mt-1">
        <h4 class="inline-flex flex-row pl-3 justify-center items-center">
          <img src={ethLogo} width="20" alt="" />
          <MintPrice mintPrice={collection.mintPrice} />
        </h4>
        <MintWidget
          collectionId={collection.id}
          cid={collection.CID}
          contractAddress={collection.contractAddress}
          maxSupply={collection.totalTokens}
          totalSupply={collection.totalSupply}
          status={collection.status}
          ABI={JSON.stringify(collection.ABI)}
          dynamicStart={collection.dynamicStart}
          mintPrice={collection.mintPrice}
          startDate={collection.startDate}
          whitelistMintEnabled={collection.whitelistMintEnabled}
          whitelistedAddresses={collection.whitelistedAddresses || []}
        />
      </div>
      <h6 class="mt-4">
        <a
          href={ethereumConfig.blockExplorer.generateContractUrl(
            collection.contractAddress
          )}
          target="_blank"
          ><span class="italic bold"
            >View on {ethereumConfig.blockExplorer.name}
          </span>
          <i class="fas fa-external-link-square"></i>
        </a>
      </h6>
    </div>
  </div>
  {
    collection.tokens.length > 0 && (
      <section
        x-data="fadeUp"
        x-bind="fadeUp"
        class="relative m-0 md:mt-4 lg:mt-12 p-4 lg:p-0 fade-up"
      >
        <div class="container bg-peach rounded-4xl px-6 py-4 md:px-11 md:py-8">
          <div class="dropdown-wrapper z-40">
            <div class="flex flex-col lg:flex-row items-start">
              <Dropdown
                className="block"
                label="Sort By"
                listenTo="allCollections"
                id="sortBy"
                selects={[
                  { label: "A-Z", sorting: [["title"], ["asc"]] },
                  { label: "Z-A", sorting: [["title"], ["desc"]] },
                ]}
              />
            </div>
            <h3 class="pt-2">Tokens</h3>
          </div>
          <div class="content-wrapper">
            <div
              x-data={`filterables({
            id: "allCollections",
            listenTo: ["sortBy"],
            data: ${JSON.stringify(collection.tokens)},
          })`}
            >
              <div
                class="transition-opacity grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 mt-8 lg:gap-y-4"
                x-ref="container"
                x-bind="container"
              >
                <template x-for="token in filtered" x-bind:key="token.title">
                  <div class="carousel-item w-full">
                    <Card
                      link={`/collections/${collection.slug}/tokens/\${token.slug}`}
                      backgroundImage="imageHelper(token.image, 'small', true)"
                    />
                  </div>
                </template>
              </div>
            </div>
          </div>
        </div>
      </section>
    )
  }

  {
    collection.tokens.length === 0 && (
      <div class="container px-4">
        <div class="rounded-4xl bg-peach px-4 md:px-8 py-8 mt-8 text-right">
          <h2 class="block text-center">
            None minted yet. You could be the first!
          </h2>
        </div>
      </div>
    )
  }
</Layout>

<script>
  import Alpine from "alpinejs";
  import intersect from "@alpinejs/intersect";

  Alpine.plugin(intersect);
</script>
