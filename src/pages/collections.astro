---
import filter from "lodash/filter";
import orderBy from "lodash/orderBy";
import Layout from "../layouts/Layout.astro";
import ethLogo from "../images/eth-logo.png";
import Carousel from "../components/ClientCarousel.astro";
import ProjectStatus from "../components/ProjectStatus.astro";
import Dropdown from "../components/Dropdown.astro";

import {
  fetchFromAPI,
  projectStatusFilters,
  getLargestPossibleImage,
} from "../library/helpers";

let { data: collections } = await fetchFromAPI("/collections", {
  populate: ["artist", "coverImg", "artist.profilePhoto"],
  fields: [
    "title",
    "slug",
    "status",
    "totalTokens",
    "description",
    "totalSupply",
    "supplyFunction",
    "reserveCount",
  ],
});

const { data: settings } = await fetchFromAPI("/general-setting", {
  populate: ["collections", "collections.artist"],
});

// only return minted tokens
const featuredCollectionsPromises = settings.collections.map(
  async (collection) => {
    const { data: tokenData } = await fetchFromAPI("/tokens", {
      sort: ["tokenId"],
      filters: {
        collection: {
          slug: collection.slug,
        },
      },
      populate: ["image"],
      fields: ["title", "slug"],
      pagination: {
        pageSize: 12,
      },
    });

    collection.tokens = tokenData;
    return {
      ...collection,
      tokens: orderBy(collection.tokens, (token) =>
        Number(token.tokenId)
      ).slice(0, collection.totalSupply),
    };
  }
);

const featuredCollections = await Promise.all(featuredCollectionsPromises);
---

<Layout title="Collections">
  <main class="relative z-10">
    {
      featuredCollections.length > 0 && (
        <section class="w-full bg-grey-darker text-white snap-start">
          <h5 class="alt text-center md:text-right pt-10 px-10">
            Featured collection
          </h5>
          <div
            x-data="featuredCollectionCarousel({
        draggable: false,
        cellAlign: 'center',
        prevNextButtons: true,
        autoPlay: false,
      })"
            class="carousel"
            x-ref="carousel"
          >
            {featuredCollections.map((featuredCollection) => (
              <div class="w-full featured-collection pb-8">
                <div class="px-4 md:px-10 pb-0 md:pb-4 lg:pb-10">
                  <a href={`/collections/${featuredCollection.slug}`}>
                    <h1 class="text-center md:text-right text-white mt-2 break-words">
                      {featuredCollection.title}
                    </h1>
                  </a>
                  <div class="flex flex-col md:flex-row gap-y-0.5 items-center md:justify-end mt-1">
                    <ProjectStatus status={featuredCollection.status} />
                    <h4 class="inline-block md:pl-5 pt-1 md:pt-0">
                      By{" "}
                      <a href={`/artists/${featuredCollection.artist.slug}`}>
                        {featuredCollection.artist.name}
                      </a>
                    </h4>
                    <div class="flex flex-row items-center">
                      <h4 class="inline-block md:pl-5 font-normal">
                        <strong>
                          {
                            featuredCollection[
                              featuredCollection.supplyFunction
                            ]
                          }
                        </strong>
                        of <strong>{featuredCollection.totalTokens}</strong>{" "}
                        minted
                      </h4>
                      <h4 class="inline-flex flex-row pl-3 justify-center items-center">
                        <img src={ethLogo} width="20" alt="" />
                        <span class="pl-1">
                          {featuredCollection.mintPrice / 10 ** 18}
                        </span>
                      </h4>
                    </div>
                  </div>
                </div>
                <div
                  x-data="featuredCollectionCarousel({
                  cellSelector: '.token',
                  pageDots: false,
                  groupCells: '80%',
                  on: {
                    ready: function() { console.log(this) }
                  }
                })"
                  x-ref="carousel"
                >
                  {featuredCollection.showTokens &&
                    featuredCollection.tokens.map((token) => (
                      <a
                        class="token w-2/3 md:w-1/3 lg:w-1/4 inline-block"
                        href={`/collections/${featuredCollection.slug}/tokens/${token.slug}`}
                      >
                        <div
                          class="rounded-4xl border-6 border-white bg-cover bg-center shadow-card"
                          style={`background-image: url(${getLargestPossibleImage(
                            token.image,
                            "medium"
                          )}); aspect-ratio: ${token.image.width} / ${
                            token.image.height
                          }`}
                        />
                      </a>
                    ))}
                </div>
              </div>
            ))}
          </div>
        </section>
      )
    }
    <section class="relative m-0 md:mt-4 lg:mt-12 p-4 lg:p-0">
      <div class="container bg-peach rounded-4xl px-6 py-4 md:px-11 md:py-8">
        <div class="dropdown-wrapper z-40">
          <div class="flex flex-col lg:flex-row items-start">
            <!-- <button class="btn btn--standard btn--grey scale-75 md:scale-100">
              <h4 class="normal-case">Filters</h4>
            </button> -->
            <Dropdown
              className="block"
              label="Sort By"
              id="sortBy"
              selects={[
                { label: "A-Z", sorting: [["title"], ["asc"]] },
                { label: "Z-A", sorting: [["title"], ["desc"]] },
              ]}
            />
          </div>
          <Dropdown
            className="inline-block lg:ml-6"
            label="Browse"
            id="filterBy"
            listenTo="allCollections"
            selects={[
              {
                label: "All Collections",
                filters: [],
              },
              ...projectStatusFilters,
            ]}
          />
        </div>
        <div class="content-wrapper">
          <div
            x-data={`filterables({
            id: "allCollections",
            listenTo: ["filterBy", "sortBy"],
            data: ${JSON.stringify(collections)},
          })`}
          >
            <div
              class="transition-opacity flex flex-col mt-8 gap-y-8 lg:gap-y-16"
              x-ref="container"
              x-bind="container"
            >
              <div x-show="filtered.length === 0">
                <h2 class="text-center text-black/40">No Results</h2>
              </div>
              <template x-for="collection in filtered" :key="collection.slug">
                <div
                  x-data="{ show: false }"
                  x-intersect.threshold.30="show = true"
                  class="md:grid grid-cols-10 transition-all"
                  x-bind:class="show === false ? 'opacity-0 translate-y-2' : 'opacity-100 translate-y-0'"
                >
                  <div class="col-span-4">
                    <a x-bind:href="`/collections/${collection.slug}`">
                      <div class="w-full overflow-hidden">
                        <div
                          x-data="imageHelper(collection.coverImg, 'medium')"
                          x-bind="backgroundImage"
                          class="aspect-square w-full hover:scale-110 transition-all bg-cover bg-center"
                        >
                        </div>
                      </div>
                    </a>
                  </div>
                  <div
                    class="mt-6 lg:mt-0 col-span-6 flex flex-col items-end text-right justify-center"
                  >
                    <a
                      :href="`/collections/${collection.slug}`"
                      class="text-right w-full lg:max-w-[75%]"
                    >
                      <h1 x-text="collection.title"></h1>
                    </a>
                    <div class="group">
                      <div class="flex flex-row my-2 items-center">
                        <div>
                          <a :href="`/artists/${collection.artist.slug}`">
                            <h4 x-text="`By ${collection.artist.name}`"></h4>
                          </a>
                          <h4 class="font-normal">
                            <strong x-text="collection.totalSupply"></strong>
                            of <strong x-text="collection.totalTokens"></strong>
                            minted
                          </h4>
                        </div>
                        <a
                          :href="`/artists/${collection.artist.slug}`"
                          class="block overflow-hidden rounded-xl h-10 w-10 ml-3"
                        >
                          <div
                            x-data="imageHelper(collection.artist.profilePhoto, 'thumbnail')"
                            x-bind="backgroundImage"
                            class="aspect-square h-10 bg-cover bg-center grayscale group-hover:grayscale-0 transition-all"
                          >
                          </div>
                        </a>
                      </div>
                    </div>
                    <div
                      class="collection-description lg:ml-10"
                      x-html="collection.description"
                    >
                    </div>
                  </div>
                </div>
              </template>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>
</Layout>
