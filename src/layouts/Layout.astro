---
export interface Props {
  title: string;
}

const { title } = Astro.props;
import Footer from "../components/Footer.astro";
import "../styles/base.css";
import "../styles/fontawesome.css";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.00, maximum-scale=3.00"
    />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="stylesheet" href="https://use.typekit.net/fmf1xml.css" />
    <meta name="generator" content={Astro.generator} />
    <title>{title} - Art Tokyo Global</title>
  </head>
  <body
    x-data="{ showMenu: false }"
    @keydown.escape="showMenu = false"
    x-bind:class="showMenu && 'overflow-hidden'"
  >
    <header class="header" x-bind:class="showMenu && 'blur-sm'">
      <a class="max-w-screen-2/3 -mb-2" href="/">
        <img class="h-6" src="/logo.png" alt="" />
      </a>
      <div class="search-wrapper"></div>
      <div class="button-wrapper">
        <div x-data="connectWallet">
          <button
            x-bind="connectButton"
            x-on:click="$store.credentials.signIn()"
            class="btn btn--standard connect-button--desktop"
          >
            <h4>Connect Wallet</h4>
          </button>
          <button
            x-bind="errorMsg"
            class="hidden btn btn--standard btn--disabled"
          >
            <h4 x-text="$store.credentials.error"></h4>
          </button>
          <div
            class="font-roc-grotesk uppercase -mb-1 text-base font-bold hidden md:flex"
            x-bind="userInfo"
          >
          </div>
        </div>
        <button
          x-on:click="showMenu = !showMenu"
          class="group btn w-9 h-9 -m-1 md:m-0"
        >
          <svg
            class="w-full h-full"
            viewBox="0 0 38 38"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <circle
              cx="10"
              cy="25"
              r="2"
              fill="white"
              class="group-hover:translate-x-[-2px] transition-all group-hover:fill-red"
            ></circle>
            <circle
              cx="19"
              cy="25"
              r="2"
              fill="white"
              class="transition-all group-hover:fill-red"></circle>
            <circle
              cx="28"
              cy="25"
              r="2"
              fill="white"
              class="group-hover:translate-x-[2px] transition-all group-hover:fill-red"
            ></circle>
          </svg>
        </button>
      </div>
    </header>
    <div class="modal-overlay" style="display:none" x-show="showMenu">
      <div
        class="menu shadow-modal"
        x-show="showMenu"
        x-transition:enter="transition-all ease-out duration-200 delay-100"
        x-transition:enter-start="opacity-0 translate-y-12 md:translate-y-0 md:translate-x-12"
        x-transition:enter-end="opacity-100 translate-y-0 md:translate-x-0"
        x-transition:leave="transition-all ease-in duration-200"
        x-transition:leave-start="opacity-100 translate-y-0 md:translate-x-0"
        x-transition:leave-end="opacity-0 -translate-y-12 md:translate-y-0 md:translate-x-12"
        x-on:click.outside="showMenu = false"
      >
        <button class="close-btn group" x-on:click="showMenu = !showMenu">
          <svg
            width="28"
            height="28"
            viewBox="0 0 28 28"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <rect x="1" width="26" height="28"></rect>
            <path
              d="M27.5 1L1 27.5"
              class="stroke-black origin-center transition-transform group-hover:rotate-12"
            ></path>
            <path
              d="M27.5 27.5L1 0.999999"
              class="stroke-black origin-center transition-transform group-hover:-rotate-12"
            ></path>
          </svg>
        </button>
        <div
          x-data="connectWallet"
          class="w-full p-16 pt-24 flex flex-row justify-center items-center"
        >
          <button
            x-bind="connectButton"
            x-on:click="$store.credentials.signIn()"
            class="btn btn--standard connect-button--all"
          >
            <h4>Connect Wallet</h4>
          </button>
          <button
            x-bind="errorMsg"
            class="hidden btn btn--standard btn--disabled"
          >
            <h4 x-text="$store.credentials.error"></h4>
          </button>
          <div
            class="font-roc-grotesk uppercase -mb-1 text-base font-bold flex"
            x-bind="userInfo"
          >
          </div>
        </div>
        <div class="menu-wrapper mt-32">
          <ul class="gap-y-2 flex flex-col items-end">
            <li class="menu-item">
              <a href="/collections">Collections</a>
            </li>
            <li class="menu-item"><a href="/artists">Artists</a></li>
          </ul>
          <ul class="mt-2 gap-y-1 flex flex-col items-end">
            <li class="menu-item menu-item--small">
              <a href="/about-us">About Us</a>
            </li>
            <li class="menu-item menu-item--small">
              <a href="/faq">FAQ</a>
            </li>
            <li class="menu-item menu-item--small">
              <a href="/privacy-policy">Privacy Policy</a>
            </li>
            <li class="menu-item menu-item--small">
              <a href="/terms-of-use">Terms of Use</a>
            </li>
          </ul>
        </div>
        <div class="mx-10 mb-4">
          <div class="social-wrapper">
            <a href=""><i class="fab fa-discord"></i></a>
            <a href=""><i class="fab fa-twitter"></i></a>
          </div>
        </div>
      </div>
    </div>
    <div class="content" x-bind:class="showMenu && 'blur-sm'">
      <slot />
      <Footer />
    </div>
    <style>
      .connect-button--all {
        @apply !hidden;

        &.connect-button--show {
          @apply !flex;
        }
      }
      .connect-button--desktop {
        @apply !hidden;
      }

      .connect-button--desktop.connect-button--show {
        @apply !hidden md:!flex;
      }

      .header {
        @apply bg-white/75 flex flex-row items-center justify-between p-4;
        @apply md:py-6 md:px-7 mix-blend-normal backdrop-blur-xl;
        @apply shadow-md sticky top-0 w-full z-30;
      }

      .button-wrapper {
        @apply flex flex-row gap-x-4;
      }

      .menu-wrapper {
        @apply mx-10 my-12 h-full flex flex-col justify-end lg:justify-start;
      }

      .social-wrapper {
        @apply border-t-1 w-full border-t-black/50 pt-2 flex flex-row justify-center;
        @apply gap-x-2;
      }

      .social-wrapper i {
        @apply text-lg;
      }

      .social-wrapper a {
        @apply p-2 md:p-0 hover:opacity-75;
      }

      .close-btn {
        @apply absolute top-8 right-10;
      }

      .menu {
        @apply w-full md:w-80 bg-white shadow-md;
        @apply rounded-4xl relative z-50 flex flex-col justify-between;
      }

      .menu-item {
        @apply font-bold text-2xl leading-none text-center md:text-right;
        @apply font-roc-grotesk uppercase;
        @apply transition-transform hover:-translate-x-2;
      }

      .menu-item--small {
        @apply font-medium text-sm text-grey-mid tracking-wider;
      }

      .menu-item a {
        @apply transition-all;
        @apply hover:text-red hover:opacity-75;
      }

      .menu-item--small a {
        @apply hover:text-black hover:opacity-100;
      }
    </style>
  </body>
</html>

<script>
  import Alpine from "alpinejs";
  import intersect from "@alpinejs/intersect";
  import persist from "@alpinejs/persist";
  import { isJwtExpired } from "jwt-check-expiration";
  import { ethereumTestnet as ethereumConfig } from "../library/network-config";

  import { ethers, BigNumber } from "ethers";
  import detectEthereumProvider from "@metamask/detect-provider";
  import _filter from "lodash/filter";
  import _orderBy from "lodash/orderBy";

  import { imageHelper } from "../library/client";
  import { projectStatus } from "../library/helpers";

  Alpine.plugin(intersect);
  Alpine.plugin(persist);

  document.addEventListener("alpine:init", () => {
    Alpine.store("credentials", {
      provider: false,
      loading: true,
      hasProvider: false,
      error: false,
      isSupportedProvider: false,
      token: Alpine.$persist(""),
      jwt: Alpine.$persist(""),
      account: Alpine.$persist(false),
      userProfile: Alpine.$persist({}),
      clearCredentials() {
        console.log("CLEAR");
        this.account = false;
        this.token = "";
        this.jwt = "";
        this.userProfile = {};
      },
      async handleAccountsChanged(accounts) {
        const browserProvider = await detectEthereumProvider();
        console.log("checking accounts");

        if (
          accounts.length === 0 || // no account connected
          (accounts[0] !== this.account && this.account !== false) // not the same account as cached account
        ) {
          this.clearCredentials();
          console.log(284);
        }

        if (accounts.length > 0) {
          const account = accounts[0];

          const token = await this.fetchToken(account);

          if (token) {
            console.log("fetched token", token);
            const invalidJWT = this.jwt.length === 0 || isJwtExpired(this.jwt);

            if (invalidJWT) {
              console.log(298);
              this.jwt = "";

              const signedMessage = await this.signMessage(
                browserProvider,
                token
              );

              const userProfile = await this.authenticate(
                account,
                signedMessage
              );

              if (userProfile.jwt) {
                this.account = account;
                this.token = token;
                this.jwt = userProfile.jwt;
                this.userProfile = userProfile.user;
              }
            } else {
              this.account = account;
            }
          } else {
            this.account = false;
          }
        }

        this.loading = false;
      },
      async init() {
        if (typeof window.ethereum !== "undefined") {
          const browserProvider = await detectEthereumProvider();

          console.log(343, browserProvider);

          if (browserProvider.isMetaMask) {
            const provider = new ethers.providers.Web3Provider(browserProvider);
            const network = await provider.send("eth_chainId", []);

            window.ethereum.on("chainChanged", (_chainId) =>
              window.location.reload()
            );

            if (network === ethereumConfig.chainId) {
              this.hasProvider = true;
              this.isSupportedProvider = browserProvider.isMetaMask;
              this.provider = provider;

              window.ethereum.on(
                "accountsChanged",
                this.handleAccountsChanged.bind(this)
              );

              this.getWallet();
            } else {
              this.loading = false;
              this.error = `Wrong network. Please connect to ${ethereumConfig.name}`;
              this.account = false;
            }
          } else {
            this.clearCredentials();
            this.loading = false;
          }
        }
      },
      async signIn() {
        this.requestWallet();
      },
      async fetchToken(address) {
        const response = await fetch(`/api/token/${address}`);
        const body = await response.text();
        return body;
      },
      async signMessage(browserProvider, token) {
        const provider = new ethers.providers.Web3Provider(browserProvider);
        const signer = provider.getSigner();
        const signedMessage = await signer.signMessage(
          `Please sign this message to connect to ATG : ${token}`
        );

        return signedMessage;
      },
      async authenticate(address, signature) {
        const response = await fetch(
          `/api/authenticate/${address}/${signature}`
        );
        const body = await response.json();
        return body;
      },
      async getWallet() {
        if (
          typeof window.ethereum !== "undefined" &&
          this.hasProvider &&
          this.isSupportedProvider &&
          this.error === false
        ) {
          const accounts = await ethereum.request({
            method: "eth_accounts",
          });
          console.log(350, accounts);
          this.handleAccountsChanged(accounts);
        }
      },
      async requestWallet() {
        if (
          typeof window.ethereum !== "undefined" &&
          this.hasProvider &&
          this.isSupportedProvider &&
          this.error === false
        ) {
          await window.ethereum.request({
            method: "eth_requestAccounts",
          });
        }
      },
    });

    Alpine.data("imageHelper", imageHelper);

    Alpine.data("connectWallet", function () {
      return {
        userInfo: {
          ["x-show"]() {
            return (
              this.$store.credentials.loading === false &&
              this.$store.credentials.account !== false &&
              this.$store.credentials.error === false
            );
          },
          ["x-html"]() {
            if (this.$store.credentials.account === false) return false;

            return this.$store.credentials.userProfile.name
              ? this.$store.credentials.userProfile.name
              : `${this.$store.credentials.account?.slice(
                  0,
                  5
                )}...${this.$store.credentials.account?.slice(-4)}`;
          },
        },
        connectButton: {
          ["x-bind:class"]() {
            return {
              "connect-button--show":
                this.$store.credentials.loading === false &&
                this.$store.credentials.account === false &&
                this.$store.credentials.error === false,
            };
          },
        },
        errorMsg: {
          ["x-bind:class"]() {
            return {
              hidden: this.$store.credentials.error === false,
            };
          },
        },
      };
    });

    Alpine.data("filterables", (opts) => {
      const { data, listenTo = [], id } = opts;
      const store = { filtered: data, data, id, filters: [], sorting: [] };

      return {
        ...store,
        container: {
          ["@alpine:initialized.document"]() {
            this.$dispatch(`${id}:init`);
          },
        },
        init() {
          listenTo.map((evt) => {
            document.addEventListener(evt, ({ detail }) => {
              const { filters, sorting } = detail;
              if (filters) {
                this.$data.filters = filters;
              }

              if (sorting) {
                this.$data.sorting = sorting;
              }

              this.$root.style.minHeight = `${this.$refs.container.clientHeight}`;
              this.$refs.container.style.opacity = 0;
              let processed = _filter(this.$data.data, ...this.$data.filters);

              if (this.$data.sorting.length === 2) {
                processed = _orderBy(
                  processed,
                  this.$data.sorting[0],
                  this.$data.sorting[1]
                );
              }

              setTimeout(() => {
                this.$data.filtered = processed;
                this.$root.style.minHeight = "auto";
                this.$refs.container.style.opacity = 1;
              }, 300);
            });
          });
        },
      };
    });

    Alpine.data("fadeUp", () => ({
      show: false,
    }));

    Alpine.bind("fadeUp", () => ({
      "x-intersect.once": "show = true",
      ":class": "show && 'fade-up--enter'",
    }));

    Alpine.data("dropdownWrapper", () => ({
      isSticky: false,
    }));

    Alpine.bind("dropdownWrapper", () => ({
      "@scroll.window.throttle.150ms":
        "isSticky = $el.getBoundingClientRect().y <= window.scrollY",
      ":class": "isSticky && 'is-sticky'",
      "@scroll.window.debounce.150ms":
        "isSticky = $el.getBoundingClientRect().y <= window.scrollY",
    }));

    Alpine.data("projectStatus", (status) => {
      return projectStatus[status];
    });
  });
</script>
