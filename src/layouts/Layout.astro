---
export interface Props {
  title: string;
}

const { title } = Astro.props;
import Footer from "../components/Footer.astro";
import "../styles/base.css";
import "../styles/fontawesome.css";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.00, maximum-scale=3.00"
    />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="stylesheet" href="https://use.typekit.net/fmf1xml.css" />
    <meta name="generator" content={Astro.generator} />
    <title>Art Tokyo Global - {title}</title>
  </head>
  <body
    x-data="{ showMenu: false }"
    @keydown.escape="showMenu = false"
    x-bind:class="showMenu && 'overflow-hidden'"
  >
    <header class="header" x-bind:class="showMenu && 'blur-sm'">
      <a class="max-w-screen-2/3 -mb-2" href="/">
        <img class="" src="/logo.svg" alt="" />
      </a>
      <div class="search-wrapper"></div>
      <div class="button-wrapper">
        <button class="hidden md:flex btn btn--standard"
          ><h4>Connect Wallet</h4>
        </button>
        <button
          x-on:click="showMenu = !showMenu"
          class="group btn w-9 h-9 -m-1 md:m-0"
        >
          <svg
            class="w-full h-full"
            viewBox="0 0 38 38"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <circle
              cx="10"
              cy="25"
              r="2"
              fill="white"
              class="group-hover:translate-x-[-2px] transition-all group-hover:fill-red"
            ></circle>
            <circle
              cx="19"
              cy="25"
              r="2"
              fill="white"
              class="transition-all group-hover:fill-red"></circle>
            <circle
              cx="28"
              cy="25"
              r="2"
              fill="white"
              class="group-hover:translate-x-[2px] transition-all group-hover:fill-red"
            ></circle>
          </svg>
        </button>
      </div>
    </header>
    <div class="modal" style="display:none" x-show="showMenu">
      <div
        class="menu shadow-modal"
        x-show="showMenu"
        x-transition:enter="transition-all ease-out duration-200 delay-100"
        x-transition:enter-start="opacity-0 translate-y-12 md:translate-y-0 md:translate-x-12"
        x-transition:enter-end="opacity-100 translate-y-0 md:translate-x-0"
        x-transition:leave="transition-all ease-in duration-200"
        x-transition:leave-start="opacity-100 translate-y-0 md:translate-x-0"
        x-transition:leave-end="opacity-0 -translate-y-12 md:translate-y-0 md:translate-x-12"
        x-on:click.outside="showMenu = false"
      >
        <button class="close-btn group" x-on:click="showMenu = !showMenu">
          <svg
            width="28"
            height="28"
            viewBox="0 0 28 28"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <rect x="1" width="26" height="28"></rect>
            <path
              d="M27.5 1L1 27.5"
              class="stroke-black origin-center transition-transform group-hover:rotate-12"
            ></path>
            <path
              d="M27.5 27.5L1 0.999999"
              class="stroke-black origin-center transition-transform group-hover:-rotate-12"
            ></path>
          </svg>
        </button>
        <div class="menu-wrapper mt-32">
          <ul class="gap-y-2 flex flex-col items-end">
            <li class="menu-item" x-bind:click="console.log($el)">
              <a href="/collections">Collections</a>
            </li>
            <li class="menu-item"><a href="/artists">Artists</a></li>
          </ul>
          <ul class="mt-2 gap-y-1 flex flex-col items-end">
            <li class="menu-item menu-item--small">
              <a href="/faq">FAQ</a>
            </li>
            <li class="menu-item menu-item--small">
              <a href="/privacy-policy">Privacy Policy</a>
            </li>
            <li class="menu-item menu-item--small">
              <a href="/terms-of-use">Terms of Use</a>
            </li>
          </ul>
        </div>
        <div class="mx-10 mb-4">
          <div class="social-wrapper">
            <a href=""><i class="fab fa-discord"></i></a>
            <a href=""><i class="fab fa-twitter"></i></a>
          </div>
        </div>
      </div>
    </div>
    <div class="content" x-bind:class="showMenu && 'blur-sm'">
      <slot />
      <Footer />
    </div>
    <style>
      .header {
        @apply bg-white/75 flex flex-row items-center justify-between p-4;
        @apply md:py-6 md:px-7 mix-blend-normal backdrop-blur-xl;
        @apply shadow-md sticky top-0 w-full z-30;
      }

      .button-wrapper {
        @apply flex flex-row gap-x-4;
      }

      .menu-wrapper {
        @apply mx-10 my-12;
      }

      .social-wrapper {
        @apply border-t-1 w-full border-t-black/50 pt-2 flex flex-row justify-center;
        @apply gap-x-2;
      }

      .social-wrapper i {
        @apply text-lg;
      }

      .social-wrapper a {
        @apply p-2 md:p-0 hover:opacity-75;
      }

      .close-btn {
        @apply absolute top-8 right-10;
      }

      .menu {
        @apply w-full md:w-80 bg-white shadow-md;
        @apply rounded-4xl relative z-50 flex flex-col justify-between;
      }

      .menu-item {
        @apply font-bold text-2xl leading-none text-center md:text-right;
        @apply font-roc-grotesk uppercase;
        @apply transition-transform hover:-translate-x-2;
      }

      .menu-item--small {
        @apply font-medium text-sm text-grey-mid tracking-wider;
      }

      .menu-item a {
        @apply transition-all;
        @apply hover:text-red hover:opacity-75;
      }

      .menu-item--small a {
        @apply hover:text-black hover:opacity-100;
      }
    </style>
  </body>
</html>

<script>
  import _filter from "lodash/filter";

  document.addEventListener("alpine:init", () => {
    Alpine.data("filterables", (opts) => {
      const { filters, data, listenTo } = opts;
      const defaultFilter = opts.defaultFilter || Object.values(filters)[0];
      const store = { filtered: [], data, filters };

      store.filtered = _filter(data, [
        defaultFilter.field,
        defaultFilter.value,
      ]);
      return {
        ...store,
        init() {
          document.addEventListener(listenTo, ({ detail }) => {
            const { filterEvent } = detail;
            if (this.$data.filters[filterEvent]) {
              this.$root.style.minHeight = `${this.$refs.container.clientHeight}`;
              this.$refs.container.style.opacity = 0;

              const newFilter = this.$data.filters[filterEvent];
              const filtered = _filter(this.$data.data, [
                newFilter.field,
                newFilter.value,
              ]);

              setTimeout(() => {
                this.$data.filtered = filtered;
                this.$root.style.minHeight = "auto";
                this.$refs.container.style.opacity = 1;
              }, 300);
            }
          });
        },
      };
    });
  });
</script>
