---
export interface Props {
  data: object[];
  filters?: {
    [key: string]: {
      field: string;
      value: string;
    };
  };
  defaultFilter?: [string, string];
  listenTo?: string;
  className?: string;
  wrapAround?: boolean;
  prevNextButtons?: boolean;
  cellAlign?: "left" | "center" | "right";
  activeCellWidth?: string;
  buttonPosition?: "inside" | "outside";
}

import "flickity/dist/flickity.min.css";

const {
  data,
  listenTo = "",
  className = "",
  cellAlign = "center",
  wrapAround = true,
  defaultFilter = [],
  prevNextButtons = true,
  activeCellWidth = "75%",
  buttonPosition = "inside",
} = Astro.props;
---

<div
  x-cloak
  x-data={`clientCarousel({
    data: ${JSON.stringify(data)},
    listenTo: "${listenTo}",
    defaultFilter: ${JSON.stringify(defaultFilter)},
    carouselOptions: {
      cellAlign: "${cellAlign}",
      wrapAround: ${wrapAround},
      prevNextButtons: ${prevNextButtons},
      groupCells: "${activeCellWidth}",
    }
  })`}
  @alpine:initialized.document="create()"
  class={`w-full h-full text-white block items-center justify-center ${className}`}
>
  <div
    class={`carousel col-start-1 row-start-1 ${
      buttonPosition === "outside" && "carousel--btn-outside"
    }`}
    x-ref="carousel"
  >
    <template x-for="item in filtered">
      <slot name="template" />
    </template>
  </div>
</div>
<script>
  import Flickity from "flickity";
  import _filter from "lodash/filter";

  document.addEventListener("alpine:init", () => {
    Alpine.data("clientCarousel", (opts) => {
      const options = { ...opts };
      console.log(options.defaultFilter);
      if (options.defaultFilter.length === 2) {
        options.filtered = _filter(options.data, options.defaultFilter);
      } else {
        options.filtered = options.data;
      }
      return {
        active: 0,
        ...options,
        init() {
          document.addEventListener(this.listenTo, ({ detail }) => {
            const { filters, sortings } = detail;
            const height = this.$refs.carousel.clientHeight;
            this.$root.style.height = `${height}px`;
            this.$refs.carousel.style.opacity = 0;
            this.$data.carousel.destroy();

            const filtered = _filter(this.$data.data, ...filters);
            this.$data.filtered = filtered;

            setTimeout(() => {
              this.$data.active = 0;
              this.create();
              this.$root.style.height = "auto";
              this.$refs.carousel.style.opacity = 1;
            }, 100);
          });
        },
        create() {
          this.$data.carousel = new Flickity(this.$refs.carousel, {
            ...this.carouselOptions,
            cellSelector: ".carousel-item",
            arrowShape:
              "M39.7407 50L62 18.0197L53.4492 12L27 50L53.4492 88L62 81.9803L39.7407 50Z",
            pageDots: false,
          });
          this.$data.carousel.on("change", (i) => (this.active = i));
        },
      };
    });
  });
</script>
