---
export interface Props {
  collectionId: string;
  collectionSlug: string;
  cid: string;
  contractAddress: string;
  startDate: number;
  dynamicStart: boolean;
  mintPrice: number;
  ABI: string;
  status: "CurrentlyMinting" | "MintingPaused" | "FinishedMinting";
  className?: string;
  maxSupply: number;
  totalSupply: number;
  whitelistMintEnabled: boolean;
  whitelistMintFunction: string;
}

const { className = "", ...props } = Astro.props;
---

<div
  x-data={`mintWidget(${JSON.stringify(props)})`}
  class="ml-4 flex flex-row items-center"
>
  <button class="btn btn--secondary mr-3" x-bind="decrementBtn">
    <i class="fas fa-minus"></i>
  </button>
  <button class="btn btn--standard" x-bind="button"
    ><h4 x-bind="buttonText"></h4>
  </button>
  <button class="btn btn--secondary ml-3" x-bind="incrementBtn">
    <i class="fas fa-plus"></i>
  </button>
</div>

<script>
  import { getPrice } from "../library/client";
  import { ethereumTestnet, ethereumMainnet } from "../library/network-config";

  const ethereumConfig =
    import.meta.env.PUBLIC_ETH_NETWORK === "eth-mainnet"
      ? ethereumMainnet
      : ethereumTestnet;

  import { ethers, BigNumber } from "ethers";
  import detectEthereumProvider from "@metamask/detect-provider";

  document.addEventListener("alpine:init", () => {
    Alpine.data("mintWidget", function (props) {
      return {
        clearTimer: undefined,
        timerDuration: 4000,
        gasLimit: 100000,
        receipt: undefined,
        loading: false,
        error: false,
        success: false,
        price: BigNumber.from(0),
        account: this.$store.credentials.account,
        mintAmount: 1,
        maxMintAmount: 2,
        message: "",
        contract: undefined,
        whitelistMintEnabled: props.whitelistMintEnabled,
        whitelistMintFunction: props.whitelistMintFunction,
        isUserWhitelisted: false,
        whitelistProof: undefined,
        props,
        async init() {
          if (typeof window.ethereum !== "undefined") {
            const browserProvider = await detectEthereumProvider();
            if (!browserProvider.isMetaMask) {
              return false;
            }

            this.price = getPrice(this.props.mintPrice);
            this.checkMaxMintAmount();

            if (this.whitelistMintEnabled) {
              const alreadyClaimed = await this.checkIfClaimed(this.account);
              if (alreadyClaimed) {
                this.error = true;
                this.message = "Already claimed token";
                return false;
              }

              const resp = await fetch(`/api/whitelist/${this.account}`, {
                method: "POST",
                body: JSON.stringify({
                  slug: this.props.collectionSlug,
                }),
                headers: {
                  "Content-Type": "application/json",
                },
              });
              const res = await resp.json();
              this.gasLimit = this.gasLimit * 10;
              this.isUserWhitelisted = res.isUserWhitelisted;
              this.whitelistProof = res.whitelistProof;
            }
          }
        },
        async getContract() {
          const browserProvider = await detectEthereumProvider();
          const provider = new ethers.providers.Web3Provider(browserProvider);

          const signer = provider.getSigner();

          const contract = new ethers.Contract(
            this.props.contractAddress,
            JSON.parse(this.props.ABI),
            signer
          );

          return contract;
        },
        async checkMaxMintAmount() {
          const contract = await this.getContract();
          this.maxMintAmount = await contract.maxMintAmountPerTx();
        },
        async checkIfClaimed(address) {
          const contract = await this.getContract();

          const alreadyClaimed =
            this.whitelistMintFunction === "whitelistMint"
              ? await contract.whitelistClaimed(address)
              : await contract.comWhitelistClaimed(address);

          return alreadyClaimed;
        },
        resetButton() {
          // this.clearTimer = undefined;
          console.log("reset button");
          this.success = false;
          this.message = "";
          if (typeof this.clearTimer !== "undefined") {
            clearTimeout(this.clearTimer);
            this.clearTimer = undefined;
          }
        },
        async mintTokens(whitelist = false) {
          if (
            this.price === 0 ||
            (this.props.status !== "CurrentlyMinting" &&
              this.props.status !== "WhitelistOnly")
          ) {
            return false;
          }
          const browserProvider = await detectEthereumProvider();
          const provider = new ethers.providers.Web3Provider(browserProvider);

          const signer = provider.getSigner();

          const contract = new ethers.Contract(
            this.props.contractAddress,
            JSON.parse(this.props.ABI),
            signer
          );

          try {
            this.loading = true;
            let tx;

            if (!whitelist) {
              tx = await contract.mint(this.mintAmount, {
                value: this.price.mul(this.mintAmount),
                gasLimit: this.gasLimit,
              });
            } else {
              if (typeof this.whitelistProof === "undefined") {
                throw new Error("No whitelist proof");
              }

              tx = await contract[this.props.whitelistMintFunction](
                this.mintAmount,
                this.whitelistProof,
                {
                  value: this.price.mul(this.mintAmount),
                  gasLimit: this.gasLimit,
                }
              );
            }
            const receipt = await tx.wait();

            this.loading = false;
            this.message = `Minting success! View transaction here`;
            this.success = true;
            this.receipt = receipt;

            fetch(`/api/collections/${this.props.collectionId}`);

            this.clearTimer = setTimeout(
              this.resetButton.bind(this),
              this.timerDuration
            );

            // @todo ping server to refresh token
            // this.refreshContractState();
          } catch (e) {
            this.loading = false;
            this.message = "Minting failed. Please try again?";
            this.gasLimit = this.gasLimit * 1.05;
            this.error = true;
            this.clearTimer = setTimeout(this.resetButton, this.timerDuration);
            console.error(e);
          }
        },
        decrementBtn: {
          ["x-show"]() {
            return (
              this.props.totalSupply < this.props.maxSupply &&
              this.props.maxMintAmountPerTx > 1
            );
            // return this.whitelistMintEnabled === false;
          },
          ["x-on:click"]() {
            if (this.mintAmount > 1) {
              this.mintAmount -= 1;
            }
          },
        },
        incrementBtn: {
          ["x-show"]() {
            return (
              this.props.totalSupply < this.props.maxSupply &&
              this.props.maxMintAmountPerTx > 1
            );
            // return this.whitelistMintEnabled === false;
          },
          ["x-on:click"]() {
            if (
              this.mintAmount < this.maxMintAmount &&
              this.mintAmount + this.props.totalSupply + 1 <
                this.props.maxSupply
            ) {
              this.mintAmount += 1;
            }
          },
        },
        button: {
          ["x-bind:class"]() {
            return {
              "btn--disabled":
                this.price === 0 ||
                this.$store.credentials.account === false ||
                (this.props.status !== "CurrentlyMinting" &&
                  this.props.status !== "WhitelistOnly") ||
                (this.whitelistMintEnabled &&
                  this.isUserWhitelisted === false) ||
                this.props.totalSupply === this.props.totalTokens,
              "btn--loading": this.loading,
              "btn--message": this.message.length > 0 && this.error === true,
              "btn--success": this.message.length > 0 && this.success === true,
            };
          },
          ["x-on:click"]() {
            if (this.success) {
              window.open(
                ethereumConfig.blockExplorer.generateTransactionUrl(
                  this.receipt.transactionHash
                ),
                "_blank"
              );
              this.resetButton();
            } else if (
              this.props.status === "CurrentlyMinting" ||
              (this.props.status === "WhitelistOnly" &&
                this.whitelistMintEnabled &&
                this.isUserWhitelisted)
            ) {
              this.mintTokens(this.props.status === "WhitelistOnly");
            }
          },
        },
        buttonText: {
          ["x-html"]() {
            if (this.loading === true) {
              return `<img class="animate-spin w-6 h-6 fill-white" src="/spinner-third.svg" alt="" />`;
            } else if (
              this.message.length > 0 &&
              (this.error === true || this.success === true)
            ) {
              return this.message;
            } else {
              return this.$store.credentials.account === false
                ? "Connect Wallet to Mint"
                : `Mint ${this.mintAmount}`;
            }
          },
        },
      };
    });
  });
</script>
